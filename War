using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace War
{
    class Program
    {
        static void Main(string[] args)
        {
            Battleground battleground = new Battleground();
            battleground.Action();
        }
    }

    class Battleground
    {
        private Army _firstArmy;
        private Army _secondArmy;

        public Battleground()
        {
            _firstArmy = new Army("Арстоцка");
            _secondArmy = new Army("Латверия");
        }

        public void Action()
        {
            string nameCountry;
            int soldierOfFirstArmy = 0;
            int soldierOfSecondArmy = 0;
            while (_firstArmy.SoldiersCount > 0 && _secondArmy.SoldiersCount > 0)
            {
                _firstArmy.Battle(soldierOfFirstArmy, _firstArmy.GetWarrior(soldierOfSecondArmy));
                _secondArmy.Battle(soldierOfSecondArmy, _secondArmy.GetWarrior(soldierOfFirstArmy));
                _firstArmy.RemoveDeadSoldier(soldierOfFirstArmy);
                _secondArmy.RemoveDeadSoldier(soldierOfSecondArmy);
                soldierOfFirstArmy = soldierOfFirstArmy == _firstArmy.SoldiersCount ? soldierOfFirstArmy : soldierOfFirstArmy++;
                soldierOfSecondArmy = soldierOfSecondArmy == _secondArmy.SoldiersCount ? soldierOfSecondArmy : soldierOfSecondArmy++;
                CheckSizeArmy(soldierOfFirstArmy, _firstArmy.SoldiersCount, ref soldierOfFirstArmy);
                CheckSizeArmy(soldierOfSecondArmy, _secondArmy.SoldiersCount, ref soldierOfSecondArmy);
                InfoArmy();
            }
            if (_firstArmy.SoldiersCount <= 0 && _secondArmy.SoldiersCount <= 0)
            {
                nameCountry = "Обе армии пали";
            }
            else
            {
                nameCountry = _firstArmy.SoldiersCount <= 0 ? _secondArmy.NameCountry : _firstArmy.NameCountry;
            }
            Console.WriteLine($"Победила: {nameCountry}");
        }

        public void CheckSizeArmy(int soldierOfArmy, int sizeArmy, ref int soldierOfFirstArmy)
        {
            if (soldierOfArmy == sizeArmy)
            {
                soldierOfFirstArmy = 0;
            }
        }

        public void InfoArmy()
        {
            _firstArmy.ShowInfo(_firstArmy.NameCountry);
            _secondArmy.ShowInfo(_secondArmy.NameCountry);
            Console.WriteLine();
        }
    }

    class Army
    {
        private List<Warrior> _soldiers = new List<Warrior>();
        private static Random _random = new Random();

        public string NameCountry { get; private set; }
        public int SoldiersCount => _soldiers.Count;

        public Army(string nameCountry)
        {
            int sizeDetschment = _random.Next(1, 101);
            NameCountry = nameCountry;
            bool captainAmerica = false, weapon = false, medic = false;
            for (int i = 0; i < sizeDetschment; i++)
            {
                captainAmerica = _random.Next(0, 100) == 1 ? true : false;
                weapon = _random.Next(0, 3) == 1 && captainAmerica == false ? true : false;
                medic = _random.Next(0, 3) == 1 && captainAmerica == false && weapon == false ? true : false;
                if (captainAmerica)
                {
                    _soldiers.Insert(i, new SuperSoldier());
                }
                else if (weapon)
                {
                    _soldiers.Insert(i, new Shooter());
                }
                else if (medic)
                {
                    _soldiers.Insert(i, new Medic());
                }
                else
                {
                    _soldiers.Insert(i, new Soldier());
                }
            }
        }

        public void Battle(int numberSolider, Warrior enemySoldier)
        {
            float damage = enemySoldier.GetDamage();
            if (enemySoldier is Shooter)
            {
                Shooter shooter = (Shooter)enemySoldier;
                damage = shooter.Shot();
            }

            switch (_soldiers[numberSolider])
            {
                case Soldier soldier:
                    soldier.Attack(damage);
                    break;
                case SuperSoldier captainAmerica:
                    captainAmerica.Attack(damage);
                    break;
                case Medic medic:
                    medic.ToHeal(_soldiers[_random.Next(0, SoldiersCount)]);
                    medic.Attack(damage);
                    break;
                default:
                    _soldiers[numberSolider].Attack(damage);
                    break;
            }
        }

        public void ShowInfo(string nameArmy)
        {
            Console.WriteLine($"Длинна армии  {nameArmy} : {_soldiers.Count}");
        }

        public void RemoveDeadSoldier(int deadSoldier)
        {
            if (_soldiers[deadSoldier].Health <= 0)
            {
                _soldiers.RemoveAt(deadSoldier);
            }
        }

        public Warrior GetWarrior(int numberSoldier)
        {
            return _soldiers[numberSoldier];
        }
    }

    class Warrior
    {
        private static Random _random = new Random();
        private float _health;

        protected float Damage;
        protected float Armor;

        public float Health
        {
            get 
            { 
                return _health; 
            }
            set
            {
                if (value > 404)
                {
                    _health = 404;
                }
                else
                {
                    _health = value;
                }
            } 
        }        

        public Warrior()
        {
            Health = _random.Next(10, 101);
            Damage = _random.Next(1, 40);
            Armor = _random.Next(0, 80);
        }

        public virtual void Attack(float damage)
        {
            Health -= damage / 100 * (100 - Armor);
        }

        public float GetDamage()
        {
            return Damage;
        }
    }

    class Soldier : Warrior { }

    class Medic : Warrior
    {
        public void ToHeal(Warrior numberWarrior)
        {
            int healthPoints = 10;
            numberWarrior.Health += healthPoints;
            Console.WriteLine($"Лечение союзника на {healthPoints} едениц.");
        }
    }

    class Shooter : Warrior
    {
        private static Random _random = new Random();
        private int _cartridges;

        public Shooter()
        {
            _cartridges = _random.Next(1, 30);
        }

        public float Shot()
        {
            if (_cartridges > 0)
            {
                int cartridgesDamage = 30;
                _cartridges--;
                Console.WriteLine($"Урон от пули + {cartridgesDamage} урона.");
                return Damage + cartridgesDamage;
            }
            else
            {
                int buttDamage = 10;
                Console.WriteLine($"Пули закончелись!\nСолдат бъет прикладом + {buttDamage} урона.");
                return Damage + buttDamage;
            }
        }
    }

    class SuperSoldier : Warrior
    {
        public SuperSoldier()
        {
            Health *= 4;
            Armor *= 4;
            Damage *= 4;
        }

        public override void Attack(float damage)
        {
            Console.WriteLine("Супер солдат защищаеться.");
            Health -= damage / 100 * (1000 - Armor);
        }
    }
}
