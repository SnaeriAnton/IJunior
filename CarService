using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CarService
{
    class Program
    {
        static void Main(string[] args)
        {
            CarService carService = new CarService();
            carService.Work();
        }
    }

    class CarService
    {

        private Engine _engine = new Engine();
        private Carburetor _carburetor = new Carburetor();
        private Windshiekd _windshiekd = new Windshiekd();
        private Wheel _wheel = new Wheel();
        private Oil _oil = new Oil();

        private Dictionary<CarPart, SparePart> _sparePartsPrice = new Dictionary<CarPart, SparePart>();
        private int _balance;
        private Warehouse _warehouse;

        public CarService()
        {
            _balance = 500;
            _warehouse = new Warehouse();
            for (int i = 0; i < 5; i++)
            {
                switch (i)
                {
                    case 0:
                        _sparePartsPrice.Add((CarPart)1 + i, new Carburetor());
                        break;
                    case 1:
                        _sparePartsPrice.Add((CarPart)1 + i, new Wheel());
                        break;
                    case 2:
                        _sparePartsPrice.Add((CarPart)1 + i, new Windshiekd());
                        break;
                    case 3:
                        _sparePartsPrice.Add((CarPart)1 + i, new Oil());
                        break;
                    case 4:
                        _sparePartsPrice.Add((CarPart)1 + i, new Engine());
                        break;
                }
            }
        }

        public void Work()
        {
            CarPart masterInput;
            bool resultCheck, CheckAvailabilitySparePart;
            while (_balance >= 0)
            {
                Console.WriteLine($"Добро пожаловать в автосервис.\n" +
                    $"Баланс автосалона: {_balance}\n");
                _warehouse.ShowInfo();

                Client client = new Client();
                Console.WriteLine($"\nКлиенту нужно заменить: {client.NameDefect}\n");
                _sparePartsPrice[client.NameDefect].ShowInfo();
                Console.WriteLine($"Выберите деталь для замены:\n" +
                    $"1.{CarPart.carburetor}\n" +
                    $"2.{CarPart.wheel}\n" +
                    $"3.{CarPart.windshiekd}\n" +
                    $"4.{CarPart.oil}\n" +
                    $"5.{CarPart.engine}");

                masterInput = (CarPart)GetNumber();
                CheckAvailabilitySparePart = _warehouse.CheckSpareParts(masterInput);
                if (CheckAvailabilitySparePart)
                {
                    _warehouse.TakeSparePartWithWarehouse(masterInput);
                }

                resultCheck = client.NameDefect == masterInput ? true : false;

                if (resultCheck && CheckAvailabilitySparePart)
                {
                    Console.WriteLine($"Вы заработали {_sparePartsPrice[client.NameDefect].GetAmountForWork()}");
                    _balance += _sparePartsPrice[client.NameDefect].GetAmountForWork();
                }
                else
                {
                    Console.WriteLine($"Ваша работа не удовлетворила клиента вы должны выплотить ему штраф в двойном размере.\n" +
                        $"Сумма штрафа составляет: {_sparePartsPrice[client.NameDefect].GetAmountForWork() * 2}");
                    _balance -= _sparePartsPrice[client.NameDefect].GetAmountForWork() * 2;
                }

                Console.ReadKey();
                Console.Clear();

            }
            Console.WriteLine("Вы начали работать в убыток и вам пришлось закрыться.");
        }

        private int GetNumber()
        {
            int number = 0;
            bool resultConvert = false;
            while (resultConvert == false)
            {
                resultConvert = int.TryParse(Console.ReadLine(), out number);
                if (number <= 5 && number > 0)
                {
                    break;
                }
                else
                {
                    Console.WriteLine("Вы ввели не корректное значение попробуйте снова.");
                    resultConvert = false;
                }
            }
            return number;
        }
    }

    class Warehouse
    {

        private static Random _random = new Random();
        private Dictionary<CarPart, int> _spareParts = new Dictionary<CarPart, int>();

        public Warehouse()
        {
            int carParts = 5;
            for (int i = 0; i < carParts; i++)
            {
                _spareParts.Add(((CarPart)1 + i), _random.Next(0, 10));
            }
        }

        public void ShowInfo()
        {
            Console.WriteLine("Список запчастей на складе:\n");
            foreach (var sparePart in _spareParts)
            {
                Console.WriteLine(sparePart.Key +": "+ sparePart.Value);
            }
        }

        public bool CheckSpareParts(CarPart nameDefect)
        {
            foreach (var sparePart in _spareParts)
            {
                if (sparePart.Key == nameDefect)
                {
                    bool resultChecks = true;
                    if (sparePart.Value == 0)
                    {
                        Console.WriteLine("У вас не достаточно деталей");
                        resultChecks = false;
                    }
                    return resultChecks;
                }
            }
            return false;
        }

        public void TakeSparePartWithWarehouse(CarPart choiceOfmaster)
        {
            _spareParts[choiceOfmaster]--;
        }
    }

    abstract class SparePart
    {
        public string Name { get; private set; }
        public int PriceItem { get; private set; } 
        public int PriceWork { get; private set; } 
        public int AmountForWork { get; private set; }

        public SparePart(string name, int priceItem, int priceWork)
        {
            Name = name;
            PriceItem = priceItem;
            PriceWork = priceWork;
            AmountForWork = PriceItem + PriceWork;
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Цена за запчасть: {PriceItem}\n" +
                $"Цена за работу: {PriceWork}\n" +
                $"Общая стоимость: {AmountForWork}\n");
        }

        public int GetAmountForWork()
        {
            return AmountForWork;
        }
    }

    class Carburetor : SparePart
    {
        public Carburetor() : base("карбюратор", 600, 400){ }
    }

    class Wheel : SparePart
    {
        public Wheel() : base("колесо", 500, 150) { }
    }

    class Windshiekd : SparePart
    {
        public Windshiekd() : base("Лобовое стекло", 300, 250){ }
    }

    class Oil : SparePart
    {
        public Oil() : base("Масло", 50, 200){ }
    }

    class Engine : SparePart
    {
        public Engine() : base("Двигатель", 8000, 1000){ }
    }

    class Client
    {
        private static Random _random = new Random();
        public CarPart NameDefect { get; private set; }

        public Client()
        {
            NameDefect = CreaterDefect(_random.Next(1, 6));
        }

        private CarPart CreaterDefect(int _random)
        {
            CarPart name = CarPart.engine;
            switch (_random)
            {
                case 1:
                    name = CarPart.carburetor;
                    break;
                case 2:
                    name = CarPart.wheel;
                    break;
                case 3:
                    name = CarPart.windshiekd;
                    break;
                case 4:
                    name = CarPart.oil;
                    break;
                case 5:
                    name = CarPart.engine;
                    break;
            }
            return  name;
        }
    }

    enum CarPart
    {
        carburetor = 1,
        wheel = 2,
        windshiekd = 3,
        oil = 4,
        engine = 5
    }
}
