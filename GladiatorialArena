using System;
using System.Collections.Generic;

namespace GladiatorialArena
{
    class Program
    {
        static void Main(string[] args)
        {
            Random random = new Random();
            Arena arena = new Arena(true);
            arena.FightOfWarriors(random);
        }
    }

    class Arena
    {
        private List<Warrior> _warriors = new List<Warrior>();
        private bool _isOpen;
        
        public Arena(bool isOpenArena)
        {
            _warriors.Add(new Barbarian(50, 10, 10));
            _warriors.Add(new Warloсk(100, 5, 20, 100));
            _warriors.Add(new Knight(100, 8, 50));
            _warriors.Add(new Archer(100, 12, 15));
            _warriors.Add(new Witcher(100, 10, 30));
            _isOpen = isOpenArena;
        }

        public void FightOfWarriors(Random random)
        {
            string userInput = "";
            int warriorOneChoice = 0;
            int warriorTwoСhoice = 0;

            if (_warriors.Count == 0)
            {
                Console.WriteLine("В темнице нет войнов.");
                _isOpen = false;
            }
            while (_isOpen == true)
            {
                for (int i = 0; i < _warriors.Count; i++)
                {
                    _warriors[i].ShowClassName(i);
                }
                Console.WriteLine("\nВыберите бойца #1: ");
                warriorOneChoice = GetIndex(_warriors.Count);
                Console.WriteLine("Выберите бойца #2: ");
                warriorTwoСhoice = GetIndex(_warriors.Count, warriorOneChoice);
                Battle(_warriors[warriorOneChoice - 1], _warriors[warriorTwoСhoice - 1], random);
                
                RemoveDeadWarriro(warriorOneChoice - 1);
                RemoveDeadWarriro(warriorTwoСhoice - 1);
                Console.Write("\nЕсли хотите закрыть арену, введите yes: ");
                userInput = Console.ReadLine();
                if (userInput == "yes")
                {
                    _isOpen = false;
                }
            }
        }

        private int GetIndex(int countWarriors, int warriorCheck = 0)
        {
            int userInput = 0;
            bool resultCheck = true;

            while (resultCheck == true)
            {
                bool resultConvert = int.TryParse(Console.ReadLine(), out userInput);
                if (userInput <= 0 || userInput > countWarriors)
                {
                    Console.WriteLine("Такого бойца нет. Выберите другого.");
                    continue;
                }
                else if (userInput == warriorCheck)
                {
                    Console.WriteLine("Этот боец уже выбран. Выберите другого.");
                    continue;
                }
                resultCheck = resultConvert ? false : true; 
                if (resultCheck)
                    Console.WriteLine("Вы ввели не коректные данные. Попробуйте еще раз.");
            }
            return userInput;
        }

        private void Battle(Warrior oneWarrior, Warrior twoWarrior, Random random)
        {
            string classNameWarriorOne = oneWarrior.ClassName;
            string classNameWarriorTwo = twoWarrior.ClassName;
            int warriorOneAction, warriorTwoAction, rounds = 0, countStunning = 0;

            Console.WriteLine($"На арене сражаются: \n{classNameWarriorOne} VS {classNameWarriorTwo}\n\n");
            while (oneWarrior.Health > 0 && twoWarrior.Health > 0)
            {
                RestorationOfAbilities(oneWarrior);
                RestorationOfAbilities(twoWarrior);
                warriorOneAction = СhooseOfAction(random);
                warriorTwoAction = СhooseOfAction(random);
                MoveBattleCourse(oneWarrior, twoWarrior, ref warriorOneAction, warriorTwoAction, classNameWarriorOne, ref countStunning, random);
                MoveBattleCourse(twoWarrior, oneWarrior, ref warriorTwoAction, warriorOneAction, classNameWarriorTwo, ref countStunning, random);
                oneWarrior.ShowInfo();
                twoWarrior.ShowInfo();
                if (countStunning > 0)
                {
                    countStunning--;
                    Console.WriteLine($"{countStunning}");
                }
                else
                {
                    if (oneWarrior.Status == false || twoWarrior.Status == false)
                    {
                        oneWarrior.ChengeStatus(true);
                        twoWarrior.ChengeStatus(true);
                    }
                }
                Console.WriteLine($"------------Раунд: {++rounds}------------\n");
            }
            Console.Write("Бой окончен. ");
            if (oneWarrior.Health <= 0 && twoWarrior.Health <= 0)
            {
                Console.Write("Ничья. Оба бойца погибли.");
            }
            else
            {
                string resultFight = oneWarrior.Health >= 0 ? $"{classNameWarriorOne}" : $"{classNameWarriorTwo}";
                Console.WriteLine($"Победил: {resultFight}");
            }
        }

        private void RemoveDeadWarriro(int selectedWarrior)
        {
            if (_warriors[selectedWarrior].Health <= 0)
            {
                _warriors.RemoveAt(selectedWarrior);
                
            }
        }

        private int СhooseOfAction(Random random)
        {
            return random.Next(0, 3);
        }

        private void AttacWarrior(float action, Warrior selectedWarrior)
        {
            selectedWarrior.Attac(action);
        }

        private void MoveWarriorInfo(int wariorAction, string selectedWarrior)
        {
            if (wariorAction == 0)
            {
                Console.WriteLine($"Боец {selectedWarrior} защищается");
            }
            else if (wariorAction == 1)
            {
                Console.WriteLine($"Боец {selectedWarrior} атакует");
            }
            else if (wariorAction == 2)
            {
                Console.WriteLine($"Боец {selectedWarrior} применяет спец атаку");
            }
        }

        private void MoveBattleCourse(Warrior selectedWarrior, Warrior enemyWarrior, ref int selectedWarriorAction, int enemyWarriorAction, string classNameWarrior, ref int countStunning, Random random)
        {
            if (selectedWarrior.Status)
            {
                MoveWarriorInfo(selectedWarriorAction, classNameWarrior);
                MoveWarrior(selectedWarrior, enemyWarrior, enemyWarriorAction, selectedWarriorAction, ref countStunning, random);
            }
            else
            {
                Console.WriteLine($"{classNameWarrior} оглушен.");
                selectedWarriorAction = 1;
            }
        }

        private void MoveWarrior(Warrior selectedWarrior, Warrior enemyWarrior, int enemyWarriorAction, int selectedWarriorAction, ref int countStunning, Random random)
        {
            if (enemyWarriorAction == 2)
            {
                enemyWarriorAction--;
            }
            int moveWarriors = enemyWarriorAction * selectedWarriorAction;
            float action;
            switch (selectedWarrior)
            {
                case Barbarian barbarian:
                    action = selectedWarriorAction == 2 ? barbarian.AttackSwipe() : barbarian.Damage * moveWarriors;
                    AttacWarrior(action, enemyWarrior);
                    break;
                case Warloсk warlock:
                    action = selectedWarriorAction == 2 ? warlock.AttackBallOfDarkness() * enemyWarriorAction : warlock.Damage * moveWarriors;
                    AttacWarrior(action, enemyWarrior);
                    break;
                case Knight knight:
                    action = selectedWarriorAction == 2 ? knight.AttackCounter() * enemyWarriorAction : knight.Damage * moveWarriors;
                    AttacWarrior(action, enemyWarrior);
                    break;
                case Archer archer:
                    action = selectedWarriorAction == 2 ? archer.ShotArrows(enemyWarrior, ref countStunning, random.Next(1,5)) * enemyWarriorAction : archer.Damage * moveWarriors;
                    AttacWarrior(action, enemyWarrior);
                    break;
                case Witcher witcher:
                    action = selectedWarriorAction == 2 ? witcher.ChoosePotion(random.Next(1, 4)) * enemyWarriorAction : witcher.Damage * moveWarriors;
                    AttacWarrior(action, enemyWarrior);
                    break;
            }
        }

        private void RestorationOfAbilities(Warrior warrior)
        {
            switch (warrior)
            {
                case Warloсk warlock:
                    warlock.ReplenishmentOfMana();
                    break;
                case Witcher witcher:
                    witcher.RecoveryPotions();
                    break;
                case Knight knight:
                    knight.SaveHealth();
                    break;
            }
        }
    }

    abstract class Warrior
    {
        public string ClassName { get; protected set; }
        public float Health { get; protected set; }
        public float Damage { get; protected set; }
        public bool Status { get; protected set; }
        protected float Armor;

        public void Attac(float damageEnemay)
        {
            Health -= damageEnemay / 100 * Armor;
        }

        public void ShowClassName(int classNumber)
        {
            Console.WriteLine($"{classNumber + 1}.{ClassName}");
        }

        public void ShowInfo()
        {
            Console.WriteLine($"Класс: {ClassName}\n" +
                $"Здоровье: {Health}\n" +
                $"Урон: {Damage}\n" +
                $"Броня: {Armor}\n");
        }

        public void ChengeStatus(bool statusWArrior)
        {
            Status = statusWArrior;
        }
    }

    class Barbarian : Warrior
    {
        public Barbarian(float health, float damage, float armor)
        {
            ClassName = "Варвар";
            Health = health;
            Damage = damage;
            Armor = armor;
            Status = true;
        }

        public float AttackSwipe()
        {
            Console.WriteLine("Варвар кричит мяу-мяу"); // правки кота
            return Damage * 2;
        }
    }

    class Warloсk : Warrior
    {
        private int _mana;
        public Warloсk(float health, float damage, float armor, int mana)
        {
            ClassName = "Чернокнижник";
            Health = health;
            Damage = damage;
            Armor = armor;
            _mana = mana;
            Status = true;
        }

        public float AttackBallOfDarkness()
        {
            if (_mana < 50)
            {
                Console.WriteLine("Не достаточно маны.");
                return 0;
            }
            else
            {
                _mana -= 50;
                return Damage * 4;
            }
        }

        public void ReplenishmentOfMana()
        {
            if (_mana != 100)
            {
                _mana += 10;
            }
        }
    }

    class Knight : Warrior
    {
        static private float _healthSave;
        public Knight(float health, float damage, float armor)
        {
            ClassName = "Рыцарь";
            Health = health;
            Damage = damage;
            Armor = armor;
            Status = true;
        }

        public void SaveHealth()
        {
            _healthSave = Health;
        }

        public float AttackCounter()
        {
            Health = _healthSave;
            return Damage * 2;
        }
    }

    class Archer : Warrior
    {
        public Archer(float health, float damage, float armor)
        {
            ClassName = "Лучник";
            Health = health;
            Damage = damage;
            Armor = armor;
            Status = true;
        }

        public float ShotArrows(Warrior enemyWarrior, ref int countStunning, int arrows)
        {
            ChangeArrowStatus(enemyWarrior, ref countStunning);
            return Damage * arrows;
        }

        private void ChangeArrowStatus(Warrior enemyWarrior, ref int countStunning)
        {
            bool statusChange = enemyWarrior.Status == true ? false : true;
            int moves = 3;
            enemyWarrior.ChengeStatus(statusChange);
            if (enemyWarrior.Status == false)
            {
                countStunning += moves;
            }
            Console.WriteLine($"{enemyWarrior.ClassName} оглушен на {moves} хода");
        }
    }

    class Witcher : Warrior
    {
        public int CountPotions { get; private set; }
        public int NumberPotion { get; private set; }
        public Witcher(float health, float damage, float armor)
        {
            ClassName = "Ведьмак";
            Health = health;
            Damage = damage;
            Armor = armor;
            Status = true;
            CountPotions = 0;
            NumberPotion = 0;
        }

        public float ChoosePotion(int numberPotion)
        {
            int rollbackMove = 5;
            int armorPoints = 15;
            int healthPoints = 5;
            int damagePoints = 2;
            if (CountPotions <= 0)
            {
                switch (numberPotion)
                {
                    case 1:
                        DrinkPotionHealth();
                        Console.WriteLine($"Зелье действует {rollbackMove + 1} ходов. За каждый ход востанавливает {healthPoints} едениц здоровья.");
                        break;
                    case 2:
                        DrinkPotionDamage();
                        Console.WriteLine($"Зелье действует {rollbackMove + 1} ходов. Каждый ход атака увеличиваеться на {damagePoints}.");
                        break;
                    case 3:
                        DrinkPotionArmor();
                        Console.WriteLine($"Зелье добовляет {armorPoints} едениц защите.");
                        break;
                    default:
                        Console.WriteLine("Зелье не применяеться.");
                        break;
                }
                Console.WriteLine($"Зелье можно выпить через {rollbackMove + 1} ходов.");
                CountPotions = rollbackMove;
                NumberPotion = numberPotion;
            }
            else
            {
                Console.WriteLine("Вы не можете выпить два зелья за раз.");
            }
            return Damage;
        }

        public void RecoveryPotions()
        {
            if (CountPotions > 0)
            {
                CountPotions--;
                switch (NumberPotion)
                {
                    case 1:
                        DrinkPotionHealth();
                        break;
                    case 2:
                        DrinkPotionDamage();
                        break;
                }
            }
        }

        private void DrinkPotionDamage()
        {
            int raisingDamage = 2;
            Damage += raisingDamage;
            Console.WriteLine($"Повышение атаки на {raisingDamage}.");
        }

        private void DrinkPotionHealth()
        {
            int raisingHealth = 5;
            if (Health < 100)
            {
                Health += raisingHealth;
                Console.WriteLine($"Излечивает на {raisingHealth} едениц.");
            }
            else
            {
                Console.WriteLine("Здоровье полное.");
            }
        }

        private void DrinkPotionArmor()
        {
            int raisinfArmor = 15;
            Armor += raisinfArmor;
            Console.WriteLine($"Повышает защиту на {raisinfArmor} едениц.");
        }
    }
}
