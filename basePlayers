using System;
using System.Collections.Generic;

namespace basePlayers
{
    class Program
    {
        static void Main(string[] args)
        {
            Base basePlayers = new Base();
            bool openBase = true;

            while (openBase)
            {
                Console.WriteLine("Выберите действие: \n" +
                    "1.Показать список играков.\n" +
                    "2.Добавить нового игрока.\n" +
                    "3.Забанить/разбанить игрока\n" +
                    "4.Удалить игрока.\n" +
                    "5.Выйти из базы.\n");
                
                switch (ReadNumber())
                {
                    case 1:
                        basePlayers.ShowInfo();
                        break;
                    case 2:
                        basePlayers.AddPlayer();
                        break;
                    case 3:
                        Console.Write("Введите номер игрока которого хотите забанить или разбанить: ");
                        basePlayers.BanPlayer();
                        break;
                    case 4:
                        Console.Write("Введите номер игрока которого хотите удалить из базы: ");
                        basePlayers.RemovPlayer();
                        break;
                    case 5:
                        openBase = false;
                        break;
                }
                Console.ReadKey();
                Console.Clear();
            }

        }
        static int ReadNumber()
        {
            int userInput = 0;
            bool result = false;
            while (!result)
            {
                result = int.TryParse(Console.ReadLine(), out userInput);
                if (!result)
                {
                    Console.WriteLine("Вы ввели не верное значение попробуйте еще раз.");
                    continue;
                }
                if (userInput <= 0 || userInput >= 6)
                {
                    Console.WriteLine("Таких пунктов меню нет попробуйте езе раз.");
                    result = false;
                }
            }
            return userInput;
        }
    }
    class Base
    {
        private List<Player> _base = new List<Player>();


        public void AddPlayer()
        {
            int lavel = 0;
            Console.Write("Введите имя игрока: ");
            string name = Console.ReadLine();
            Console.Write("Введите уровень игрока: ");
            bool userInput = int.TryParse(Console.ReadLine(), out lavel);
            bool flag = true;
            _base.Add(new Player(name, lavel, flag));
            Console.WriteLine("Новый игрок добавлен!");
        }
        public void ShowInfo()
        {
            if (_base.Count == 0)
            {
                Console.WriteLine("В базе нету играков!");
            }
            else
            {
                for (int i = 0; i < _base.Count; i++)
                {
                    Player player = _base[i];
                    Console.WriteLine($"Порядковый номер: {i + 1}\n" +
                        $"Ник игрока: {player.NamePlayer}\n" +
                        $"Уровень игрока: {player.LavelPlayer}");
                    if (player.Flag == true)
                    {
                        Console.WriteLine($"Состояние игрока: Не забанен\n");
                    }
                    else
                    {
                        Console.WriteLine($"Состояние игрока: Забанен\n");
                    }
                }
            }
        }
        public void RemovPlayer()
        {
            int numberPlayer = ReadNumber();
            if (CheсkNumberPlayer(numberPlayer))
            {
                Console.WriteLine($"Игрок {_base[numberPlayer - 1].NamePlayer} удален");
                _base.RemoveAt(numberPlayer - 1);
            }
        }
        public void BanPlayer()
        {
            int numberPlayer = ReadNumber();
            if (CheсkNumberPlayer(numberPlayer))
            {
                if (_base[numberPlayer - 1].Flag == true)
                {
                    _base[numberPlayer - 1].Ban(false);
                    Console.WriteLine($"Игрок: {_base[numberPlayer - 1].NamePlayer}, забанен");
                }
                else
                {
                    _base[numberPlayer - 1].Ban(true);
                    Console.WriteLine($"Игрок: {_base[numberPlayer - 1].NamePlayer}, разбанен");
                }
            }
        }

        private bool CheсkNumberPlayer(int number)
        {
            if (_base.Count < number || _base.Count > number)
            {
                Console.WriteLine("Игрока с таким номером нету!");
                return false;
            }
            else
            {
                return true;
            }
        }

        private int ReadNumber()
        {
            int userInput = 0;
            bool result = false;
            while (!result)
            {
                result = int.TryParse(Console.ReadLine(), out userInput);
                if (!result)
                {
                    Console.WriteLine("Вы ввели не верное значение попробуйте еще раз.");
                }
                else
                {
                    result = true;
                }
            }
            return userInput;
        }
    }
    class Player
    {
        public string NamePlayer { get; private set; }
        public int LavelPlayer { get; private set; }
        public bool Flag { get; private set; }

        public Player(string namePlayer, int lavelPlayer, bool flag)
        {
            NamePlayer = namePlayer;
            LavelPlayer = lavelPlayer;
            Flag = flag;
        }

        public void Ban(bool banFlag)
        {
            Flag = banFlag;
        }
    }
}
