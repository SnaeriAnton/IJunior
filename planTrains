using System;
using System.Collections.Generic;

namespace planTrains
{
    class Program
    {
        static void Main(string[] args)
        {
            RailwayStation timetableBoard = new RailwayStation();
            bool railwayStationIsOpen = true;
            string userInput = "";

            while (railwayStationIsOpen == true)
            {
                Console.WriteLine("Рассписание поездов:");
                timetableBoard.ShowInfo();
                Console.WriteLine();
                Console.Write("Закрыть станцию введите Yes: ");
                userInput = Console.ReadLine();
                if (userInput == "Yes")
                {
                    railwayStationIsOpen = false;
                    break;
                }
                Console.SetCursorPosition(0, timetableBoard.ReturnTimeravleCount() + 6);
                timetableBoard.AddTripPlan();
                Console.Clear();
            }
        }
    }

    class Path
    {
        public string Out { get; private set; }
        public string In { get; private set; }

        public Path(string outPath, string inPath)
        {
            Out = outPath;
            In = inPath;
        }
    }

    class Cashier
    {
        public int Passengers { get; private set; }

        public Cashier()
        {
            Random random = new Random();
            Passengers = random.Next(0, 300);
        }
    }

    class Train
    {
        private List<int> _wagons = new List<int>();
        public int TicketBuyed { get; private set; }
        public bool Status { get; private set; }
        public int Number { get; private set; }

        public Train(bool ticketsBuy, bool preperationTrain, int numberTrain)
        {
            Number = numberTrain;
            Cashier cashier = new Cashier();
            Random random = new Random();
            int valueTickets = cashier.Passengers * Convert.ToInt32(preperationTrain);
            int sizeWagon;
            while (valueTickets > 0)
            {
                sizeWagon = random.Next(10, 60);
                valueTickets -= sizeWagon;
                _wagons.Add(sizeWagon);
            }
            TicketBuyed = cashier.Passengers * Convert.ToInt32(ticketsBuy);
            Status = (ticketsBuy == false || preperationTrain == false ? false : true);
        }

        public int ReturnCountWagons()
        {
            return _wagons.Count;
        }
    }

    class RailwayStation
    {
        private static int _numberTrains = 8090;
        private int _numberTrain;
        private Dictionary<Path, Train> _timetable = new Dictionary<Path, Train>();

        public void AddTripPlan()
        {
            _numberTrain = ++_numberTrains;
            string outPath, inPath;
            bool ticketsSell, preperationTrain;
            Console.Write("Откуда отбывает поезд: ");
            outPath = Console.ReadLine();
            Console.Write("Куда прибывает поезд: ");
            inPath = Console.ReadLine();
            Console.WriteLine("Начать продажу билетов?");
            ticketsSell = CheakTrain();
            if (ticketsSell == false)
            {
                preperationTrain = false;
            } else
            {
                Console.WriteLine("Сформировать поезд?");
                preperationTrain = CheakTrain();
            }
            _timetable.Add(new Path(outPath, inPath), new Train(ticketsSell, preperationTrain, _numberTrain));
        }
        public void ShowInfo()
        {
            if (_timetable.Count == 0)
            {
                Console.WriteLine("Рассписания нету");
            }
            else
            {
                foreach (var timetable in _timetable)
                {
                    Console.Write($"№ поезда {timetable.Value.Number}, " +
                        $"{timetable.Key.Out}-{timetable.Key.In}. " +
                        $"Продано билетов: {timetable.Value.TicketBuyed}. " +
                        $"Длинна поезда: {timetable.Value.ReturnCountWagons()}. Статус: ");
                    string status = (timetable.Value.Status == true ? "\tОтправлен" : "\tОтменен");
                    Console.WriteLine(status);
                }
            }
        }

        public int ReturnTimeravleCount()
        {
            return _timetable.Count;
        }

        private bool CheakTrain()
        {
            bool exit = false;
            string userInput = "";
            bool result = false;
            while (!exit)
            {
                Console.Write("Введите Yes или No: ");
                userInput = Console.ReadLine();
                if (userInput == "Yes")
                {
                    exit = true;
                    result = true;
                }
                else if (userInput == "No")
                {
                    exit = true;
                    result = false;
                }
                else
                {
                    Console.WriteLine("Вы вели не корректное значениею Попробуйте еще раз.");
                }
            }
            return result;
        }
    }
}
